
//ANOTACIONES IMPORTANTES
//El programa rechaza las cadenas cuya longitud no sea un múltiplo de 4. Sin embargo, no cumple con el requisito de llenar la cadena con un carácter especial (no supe como hacerlo :c)
//Cuando le ingresa una cadena de 'a'‥'d' cuya longitud no es un multiplo de 4, el programa aplica la permutacion a todos los substring que sí tienen longitud 4 y, el último que no cumple con esta restricción, no se imprime con el transducer
//Por lo demás, al ingresar cualquier cadena con longitud mútiplo de 4, el programa codificia y decodifica a la perfección

using gold.**

procedure main(args:String[]) begin
	estados := {"TRASH","INICIO"}∪({⟨0⟩,⟨1⟩,⟨2⟩,⟨3⟩,⟨0,1⟩,⟨0,2⟩,⟨0,3⟩,⟨1,0⟩,⟨1,2⟩,⟨1,3⟩,⟨2,0⟩,⟨2,1⟩,⟨2,3⟩,⟨3,0⟩,⟨3,1⟩,⟨3,2⟩,
	⟨0,1,2⟩,⟨0,1,3⟩,⟨0,2,1⟩,⟨0,2,3⟩,⟨0,3,1⟩,⟨0,3,2⟩,⟨1,0,2⟩,⟨1,0,3⟩,⟨1,2,0⟩,⟨1,2,3⟩,⟨1,3,0⟩,⟨1,3,2⟩,⟨2,0,1⟩,⟨2,0,3⟩,⟨2,1,0⟩,⟨2,1,3⟩,⟨2,3,0⟩,⟨2,3,1⟩,⟨3,0,1⟩,⟨3,0,2⟩,⟨3,1,0⟩,⟨3,1,2⟩,⟨3,2,0⟩,⟨3,2,1⟩,
	⟨0,1,2,3⟩,⟨0,1,3,2⟩,⟨0,2,1,3⟩,⟨0,2,3,1⟩,⟨0,3,1,2⟩,⟨0,3,2,1⟩,⟨1,0,2,3⟩,⟨1,0,3,2⟩,⟨1,2,0,3⟩,⟨1,2,3,0⟩,⟨1,3,0,2⟩,⟨1,3,2,0⟩,⟨2,0,1,3⟩,⟨2,0,3,1⟩,⟨2,1,0,3⟩,⟨2,1,3,0⟩,⟨2,3,0,1⟩,⟨2,3,1,0⟩,⟨3,0,1,2⟩,
	⟨3,0,2,1⟩,⟨3,1,0,2⟩,⟨3,1,2,0⟩,⟨3,2,0,1⟩,⟨3,2,1,0⟩})∪
	({⟨0,1,2,3⟩,⟨0,1,3,2⟩,⟨0,2,1,3⟩,⟨0,2,3,1⟩,⟨0,3,1,2⟩,⟨0,3,2,1⟩,⟨1,0,2,3⟩,⟨1,0,3,2⟩,⟨1,2,0,3⟩,⟨1,2,3,0⟩,⟨1,3,0,2⟩,⟨1,3,2,0⟩,⟨2,0,1,3⟩,⟨2,0,3,1⟩,⟨2,1,0,3⟩,⟨2,1,3,0⟩,⟨2,3,0,1⟩,⟨2,3,1,0⟩,⟨3,0,1,2⟩,
	⟨3,0,2,1⟩,⟨3,1,0,2⟩,⟨3,1,2,0⟩,⟨3,2,0,1⟩,⟨3,2,1,0⟩}×({⟨x⟩|x∈{'a','b','c','d'}}∪{⟨x,y⟩|x∈{'a','b','c','d'},y∈{'a','b','c','d'}}∪{⟨x,y,z⟩|x∈{'a','b','c','d'},y∈{'a','b','c','d'},z∈{'a','b','c','d'}}∪{⟨x,y,z,w⟩|x∈{'a','b','c','d'},y∈{'a','b','c','d'},z∈{'a','b','c','d'},w∈{'a','b','c','d'}}))
	
   
	input := {'0','1','2','3','a','b','c','d'}
	output := input
	inicio := "INICIO"
	fin := {⟨0,1,2,3⟩,⟨0,1,3,2⟩,⟨0,2,1,3⟩,⟨0,2,3,1⟩,⟨0,3,1,2⟩,⟨0,3,2,1⟩,⟨1,0,2,3⟩,⟨1,0,3,2⟩,⟨1,2,0,3⟩,⟨1,2,3,0⟩,⟨1,3,0,2⟩,⟨1,3,2,0⟩,⟨2,0,1,3⟩,⟨2,0,3,1⟩,⟨2,1,0,3⟩,⟨2,1,3,0⟩,⟨2,3,0,1⟩,⟨2,3,1,0⟩,⟨3,0,1,2⟩,
	⟨3,0,2,1⟩,⟨3,1,0,2⟩,⟨3,1,2,0⟩,⟨3,2,0,1⟩,⟨3,2,1,0⟩}×{⟨x,y,z,w⟩|x∈{'a','b','c','d'},y∈{'a','b','c','d'},z∈{'a','b','c','d'},w∈{'a','b','c','d'}}
	
	A := GDeterministicTransducer(estados, input, output, inicio, fin, transiciones, g, h)
	Utilities.testCodeDecode(A,A)
end

function transiciones(estado, caracter) begin
	//Los primeros 4 digitos deben ir desde 0 hasta 3 y deben ser SIN REPETICIÓN
	if estado = "INICIO" and caracter ∈ {'0','1','2','3'}then
		return ⟨Integer.parseInt(caracter)⟩
	elseif estado ∈ {⟨0⟩,⟨1⟩,⟨2⟩,⟨3⟩} and caracter ∈ {'0','1','2','3'} and estado[0] ≠ Integer.parseInt(caracter) then
		return ⟨estado[0], Integer.parseInt(caracter)⟩
	elseif estado in {⟨0,1⟩,⟨0,2⟩,⟨0,3⟩,⟨1,0⟩,⟨1,2⟩,⟨1,3⟩,⟨2,0⟩,⟨2,1⟩,⟨2,3⟩,⟨3,0⟩,⟨3,1⟩,⟨3,2⟩} and caracter ∈ {'0','1','2','3'} and Integer.parseInt(caracter) ≠ estado[0] and  Integer.parseInt(caracter) ≠ estado[1] and estado[0] ≠ estado[1] then
		return ⟨estado[0], estado[1], Integer.parseInt(caracter)⟩
	elseif estado in {⟨0,1,2⟩,⟨0,1,3⟩,⟨0,2,1⟩,⟨0,2,3⟩,⟨0,3,1⟩,⟨0,3,2⟩,⟨1,0,2⟩,⟨1,0,3⟩,⟨1,2,0⟩,⟨1,2,3⟩,⟨1,3,0⟩,⟨1,3,2⟩,⟨2,0,1⟩,⟨2,0,3⟩,⟨2,1,0⟩,⟨2,1,3⟩,⟨2,3,0⟩,⟨2,3,1⟩,⟨3,0,1⟩,⟨3,0,2⟩,⟨3,1,0⟩,⟨3,1,2⟩,⟨3,2,0⟩,⟨3,2,1⟩} and caracter ∈ {'0','1','2','3'} and Integer.parseInt(caracter) ≠ estado[0] and Integer.parseInt(caracter) ≠ estado[1] and Integer.parseInt(caracter) ≠ estado[2] and estado[0]≠estado[1] and estado[0]≠estado[2] and estado[1]≠estado[2] then
		return ⟨estado[0], estado[1], estado[2], Integer.parseInt(caracter)⟩	
		
	
	//Las cadenas de caracteres 'a'‥'d' pueden tener repetición (el texto no dice nada al respecto)
	elseif |estado| = 4 and caracter ∈ {'a','b','c','d'} then
		return ⟨estado, ⟨caracter⟩⟩
	else if |estado| = 2 and |estado[0]| = 4 and |estado[1]| = 1 and caracter ∈ {'a','b','c','d'} then
		return ⟨estado[0], ⟨estado[1][0],caracter⟩⟩
	else if |estado| = 2 and |estado[0]| = 4 and |estado[1]| = 2 and caracter ∈ {'a','b','c','d'}  then
		return ⟨estado[0], ⟨estado[1][0],estado[1][1],caracter⟩⟩
	else if |estado| = 2 and |estado[0]| = 4 and |estado[1]| = 3 and caracter ∈ {'a','b','c','d'}  then
		return ⟨estado[0], ⟨estado[1][0],estado[1][1],estado[1][2],caracter⟩⟩		
		
	else if |estado| = 2 and |estado[0]| = 4 and |estado[1]| = 4 and caracter ∈ {'a','b','c','d'} then
		return ⟨estado[0], ⟨caracter⟩⟩	
		
	else
		return "TRASH"		
	end
end


	
function g(estado) begin
	if |estado| = 4 then
		return inversa(String.valueOf(estado[0])+String.valueOf(estado[1])+String.valueOf(estado[2])+String.valueOf(estado[3]))
	elseif |estado| = 2 and |estado[0]|=4 and |estado[1]|=4 then
		return String.valueOf(estado[1][estado[0][0]])+String.valueOf(estado[1][estado[0][1]])+String.valueOf(estado[1][estado[0][2]])+String.valueOf(estado[1][estado[0][3]])
	else
		return λ
		
	end
end


function h(estado, caracter) begin
	return λ
end


function inversa(p) begin
	lista := new GArrayList()
	for each t∈p do
		lista.addLast(Character.getNumericValue(t))
	end
	x:=⟦0,0,0,0⟧
	for each n∈lista do
		x[lista[n]] = n
	end
	retorno := ""
	for each n∈x do
		retorno = retorno+Integer.toString(n)
	end
	return retorno
	
end